@page "/login"
@using GiftOfGivers.Shared.DTOs
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - Gift of the Givers</PageTitle>

<div class="min-h-screen bg-background flex items-center justify-center px-4 py-8">
    <div class="max-w-md w-full">
        <div class="bg-card rounded-lg shadow-lg p-8">
            <!-- Header -->
            <div class="text-center mb-8">
                <div class="flex items-center justify-center space-x-2 mb-4">
                    <div class="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
                        <span class="text-white font-bold text-lg">G</span>
                    </div>
                    <h1 class="text-2xl font-bold gradient-text">Gift of the Givers</h1>
                </div>
                <h2 class="text-xl font-semibold text-foreground mb-2">Welcome Back</h2>
                <p class="text-muted-foreground">Sign in to continue your mission</p>
            </div>

            @if (isLoading)
            {
                <div class="flex justify-center py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                </div>
            }
            else
            {
                <EditForm Model="loginForm" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="bg-destructive/10 border border-destructive/20 text-destructive px-4 py-3 rounded-lg mb-6">
                            <p class="text-sm">@errorMessage</p>
                        </div>
                    }

                    <!-- Email -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-foreground mb-2">Email Address</label>
                        <InputText @bind-Value="loginForm.Email" 
                                 type="email" 
                                 class="w-full px-3 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary" 
                                 placeholder="Enter your email" />
                        <ValidationMessage For="@(() => loginForm.Email)" class="text-destructive text-xs mt-1" />
                    </div>

                    <!-- Password -->
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-foreground mb-2">Password</label>
                        <div class="relative">
                            <InputText @bind-Value="loginForm.Password" 
                                     type="@(showPassword ? "text" : "password")" 
                                     class="w-full px-3 py-2 pr-10 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary" 
                                     placeholder="Enter your password" />
                            <button type="button" 
                                    class="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
                                    @onclick="TogglePasswordVisibility">
                                @if (showPassword)
                                {
                                    <span>üëÅÔ∏è</span>
                                }
                                else
                                {
                                    <span>üëÅÔ∏è‚Äçüó®Ô∏è</span>
                                }
                            </button>
                        </div>
                        <ValidationMessage For="@(() => loginForm.Password)" class="text-destructive text-xs mt-1" />
                    </div>

                    <!-- Remember Me & Forgot Password -->
                    <div class="flex items-center justify-between mb-6">
                        <label class="flex items-center">
                            <InputCheckbox @bind-Value="loginForm.RememberMe" class="mr-2" />
                            <span class="text-sm text-muted-foreground">Remember me</span>
                        </label>
                        <a href="/forgot-password" class="text-sm text-primary hover:underline">
                            Forgot password?
                        </a>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="w-full btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="flex items-center justify-center">
                                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                Signing In...
                            </span>
                        }
                        else
                        {
                            <span>Sign In</span>
                        }
                    </button>
                </EditForm>
            }

            <!-- Register Link -->
            <div class="text-center mt-6 pt-6 border-t border-border">
                <p class="text-muted-foreground">
                    Don't have an account? 
                    <a href="/register" class="text-primary hover:underline font-medium">Create one here</a>
                </p>
            </div>
        </div>

        <!-- Additional Info -->
        <div class="mt-8 text-center text-sm text-muted-foreground">
            <p>By signing in, you agree to our mission of helping others.</p>
        </div>
    </div>
</div>

@code {
    private GiftOfGivers.Client.Services.LoginFormDto loginForm = new();
    private bool isLoading = false;
    private bool isSubmitting = false;
    private bool showPassword = false;
    private string errorMessage = "";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        try
        {
            isSubmitting = true;
            errorMessage = "";

            var result = await AuthService.LoginAsync(loginForm);

            if (result.Success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = result.Message ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            await JSRuntime.InvokeVoidAsync("console.error", "Login error:", ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}